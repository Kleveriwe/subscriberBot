import database
import states
from aiogram import Router, types, F
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from datetime import datetime, timezone, timedelta
from utils import fmt_card, fmt_field, make_keyboard

router = Router()


# -----------------------------
# –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–∞–∑–±–æ—Ä–∞ callback_data
# -----------------------------
def parse_cd(data: str, prefix: str, parts: int = 1) -> list[str]:
    """
    –£–±–∏—Ä–∞–µ—Ç –ø—Ä–µ—Ñ–∏–∫—Å –∏ —Ä–∞–∑–±–∏–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –ø–æ '_' –Ω–µ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ parts —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
    """
    payload = data.removeprefix(prefix)
    items = payload.split("_", parts)
    if len(items) < parts:
        raise ValueError(f"Bad callback_data: {data}")
    return items


# -----------------------------
# /start
# -----------------------------
@router.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()

    # –ï—Å–ª–∏ deep-link —Å ID: /start <channel_id>
    args = message.text.split(maxsplit=1)
    if len(args) > 1:
        try:
            channel_id = int(args[1])
            return await show_tariffs_for_channel(message, channel_id)
        except ValueError:
            return await message.answer(
                "‚ùó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É –≤–∏–¥–∞:\n"
                "`https://t.me/YourBot?start=-123456789`",
                parse_mode="Markdown"
            )

    # –û–±—ã—á–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    bot_username = (await message.bot.me()).username
    text = fmt_card(
        "–ü—Ä–∏–≤–µ—Ç!",
        [
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –∫—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø –≤ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª.",
            "",
            fmt_field("‚ûï", "–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", "–¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫"),
        ]
    )
    kb = make_keyboard([
        ("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", "start_add_channel"),
    ], row_width=1)
    await message.answer(text, parse_mode="HTML", reply_markup=kb)


@router.callback_query(F.data == "start_add_channel")
async def start_add_channel(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.answer(
        "–ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –∫–∞–Ω–∞–ª –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–∞—Ä–∏—Ñ—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
        "/add_my_channel",
        parse_mode="HTML"
    )


# -----------------------------
# –í–≤–æ–¥ ID –≤—Ä—É—á–Ω—É—é
# -----------------------------
@router.callback_query(F.data == "enter_channel")
async def enter_channel(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    text = fmt_card("–í–≤–æ–¥ ID –∫–∞–Ω–∞–ª–∞", ["–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∫–∞–Ω–∞–ª–∞."])
    kb = make_keyboard([("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "start")], row_width=1)
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=kb)
    await state.set_state(states.UserOrderState.WAITING_CHANNEL_ID)


@router.message(states.UserOrderState.WAITING_CHANNEL_ID)
async def process_channel_id(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if not text.isdigit() and not (text.startswith("-") and text[1:].isdigit()):
        return await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID –∫–∞–Ω–∞–ª–∞.")
    channel_id = int(text)
    await state.clear()
    await show_tariffs_for_channel(message, channel_id)


# -----------------------------
# –ü–æ–∫–∞–∑ —Ç–∞—Ä–∏—Ñ–æ–≤
# -----------------------------
async def show_tariffs_for_channel(message: types.Message, channel_id: int):
    channel = database.get_channel(channel_id)
    if not channel:
        return await message.answer("‚ùó –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID.", parse_mode="HTML")

    tariffs = database.list_tariffs(channel_id)
    if not tariffs:
        return await message.answer("‚ÑπÔ∏è –í —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤.", parse_mode="HTML")

    lines = [fmt_field("üíé", t["title"], f"{t['duration_days']} –¥–Ω ‚Äî {t['price']}‚ÇΩ") for t in tariffs]
    text = fmt_card(f"–¢–∞—Ä–∏—Ñ—ã ¬´{channel['title']}¬ª", lines)
    kb = make_keyboard(
        [(t["title"], f"buy_{channel_id}_{t['id']}") for t in tariffs],
        row_width=1
    )
    await message.answer(text, parse_mode="HTML", reply_markup=kb)

@router.callback_query(F.data.startswith("back_to_tariffs_"))
async def back_to_tariffs(callback: types.CallbackQuery, state: FSMContext):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º channel_id
    channel_id = int(callback.data.removeprefix("back_to_tariffs_"))

    # –£–±–∏—Ä–∞–µ–º ¬´—á–∞—Å–∏–∫–∏¬ª –∏ —É–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.answer()
    await callback.message.delete()

    # –°–±—Ä–∞—Å—ã–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –Ω—É–∂–Ω–æ,
    # –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º —Å–Ω–æ–≤–∞ —Å–ø–∏—Å–æ–∫ —Ç–∞—Ä–∏—Ñ–æ–≤
    await show_tariffs_for_channel(callback.message, channel_id)

# -----------------------------
# –ü–æ–∫—É–ø–∫–∞ —Ç–∞—Ä–∏—Ñ–∞
# -----------------------------
@router.callback_query(F.data.startswith("buy_"))
async def callback_buy(callback: types.CallbackQuery, state: FSMContext):
    try:
        channel_str, tariff_str = parse_cd(callback.data, prefix="buy_", parts=2)
        channel_id = int(channel_str)
        tariff_id = int(tariff_str)
    except Exception:
        return await callback.answer("‚ùó –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)

    user_id = callback.from_user.id
    database.create_order(channel_id, user_id, tariff_id)

    channel = database.get_channel(channel_id)
    tariff = database.get_tariff(tariff_id)
    lines = [
        f"–†–µ–∫–≤–∏–∑–∏—Ç—ã: <code>{channel['payment_info']}</code>",
        "",
        fmt_field("üõí", "–¢–∞—Ä–∏—Ñ", tariff["title"]),
        fmt_field("‚è≥", "–°—Ä–æ–∫", f"{tariff['duration_days']} –¥–Ω"),
        fmt_field("üí∞", "–¶–µ–Ω–∞", f"{tariff['price']}‚ÇΩ"),
        "",
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞."
    ]
    text = fmt_card("–û–ø–ª–∞—Ç–∞", lines)
    kb = make_keyboard([("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", f"back_to_tariffs_{channel_id}")], row_width=1)

    await callback.message.answer(text, parse_mode="HTML", reply_markup=kb)
    await callback.answer()
    await state.set_state(states.UserOrderState.WAITING_SCREENSHOT)
    await state.update_data(channel_id=channel_id, tariff_id=tariff_id)


# -----------------------------
# –ü—Ä–∏—ë–º —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
# -----------------------------
@router.message(states.UserOrderState.WAITING_SCREENSHOT, F.photo)
async def receive_screenshot(message: types.Message, state: FSMContext):
    data = await state.get_data()
    channel_id = data["channel_id"]
    tariff_id = data["tariff_id"]
    user_id = message.from_user.id
    photo = message.photo[-1].file_id

    database.update_order_proof(channel_id, user_id, tariff_id, proof_photo_id=photo)

    channel = database.get_channel(channel_id)
    tariff = database.get_tariff(tariff_id)
    owner_id = channel["owner_id"]
    mention = (f"@{message.from_user.username}"
               if message.from_user.username
               else f"<a href='tg://user?id={user_id}'>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a>")

    lines = [
        f"–ó–∞—è–≤–∫–∞ –æ—Ç {mention} (ID: <code>{user_id}</code>)",
        fmt_field("üì¶", "–¢–∞—Ä–∏—Ñ", tariff["title"]),
        fmt_field("‚è≥", "–°—Ä–æ–∫", f"{tariff['duration_days']} –¥–Ω"),
        fmt_field("üí∞", "–¶–µ–Ω–∞", f"{tariff['price']}‚ÇΩ"),
    ]
    text = fmt_card("–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞", lines)
    kb = make_keyboard([
        ("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", f"approve_{channel_id}_{user_id}_{tariff_id}"),
        ("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", f"reject_{channel_id}_{user_id}_{tariff_id}"),
        ("üôä –ë–µ–∑ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è", f"reject_silent_{channel_id}_{user_id}_{tariff_id}")
    ], row_width=1)

    await message.bot.send_photo(owner_id, photo, caption=text,
                                 parse_mode="HTML", reply_markup=kb)
    await message.answer("‚úÖ –í–∞—à —á–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.", parse_mode="HTML")
    await state.clear()


# -----------------------------
# /cancel
# -----------------------------
@router.message(Command("cancel"))
async def cmd_cancel(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", parse_mode="HTML")


# -----------------------------
# /me ‚Äî –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
# -----------------------------
@router.message(Command("me"))
async def cmd_me(message: types.Message):
    user_id = message.from_user.id
    subs = database.list_user_subscriptions(user_id)
    if not subs:
        return await message.answer("‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.", parse_mode="HTML")

    now_ts = int(datetime.now(tz=timezone.utc).timestamp())
    lines = []
    for s in subs:
        exp_ts = s["expire_at"]
        exp_dt = datetime.fromtimestamp(exp_ts, tz=timezone.utc) + timedelta(hours=3)
        delta = exp_ts - now_ts
        days_left = delta // 86400
        hours_left = (delta % 86400) // 3600
        if days_left > 0:
            rem = f"{days_left} –¥–Ω"
        else:
            rem = f"{hours_left} —á"
        lines.append(fmt_field("üì∫", s["channel_title"],
                               f"–¥–æ {exp_dt.strftime('%d.%m.%Y %H:%M')} ({rem})"))

    text = fmt_card("–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏", lines)
    await message.answer(text, parse_mode="HTML")
