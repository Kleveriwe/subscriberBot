from aiogram import Router, types, F
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext

import database
import states
from utils import fmt_card, fmt_field, make_keyboard

router = Router()


# -----------------------------
# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø–æ—Ç–æ–∫
# -----------------------------
@router.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()

    text = message.text or ""
    parts = text.split(maxsplit=1)

    if len(parts) > 1:
        try:
            channel_id = int(parts[1])
        except ValueError:
            return await message.answer(
                "‚ùó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å —Å—Å—ã–ª–∫–∞ –≤–∏–¥–∞\n"
                "`https://t.me/YourBot?start=-123456789`",
                parse_mode="Markdown"
            )
        return await show_tariffs_for_channel(message, channel_id)

    # 2) –ü—Ä–æ—Å—Ç–æ /start ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ç—Ä–∏ –æ–ø—Ü–∏–∏ —Å—Ä–∞–∑—É
    bot_username = (await message.bot.me()).username
    greeting = fmt_card(
        "–ü—Ä–∏–≤–µ—Ç!",
        [
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª.",
            "",
            fmt_field("‚ûï", "–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–∞–Ω–∞–ª", "–¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –ø–æ–¥–ø–∏—Å–æ–∫"),
        ]
    )
    kb = make_keyboard([
        ("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", "start_add_channel"),
    ], row_width=1)

    await message.answer(greeting, parse_mode="HTML", reply_markup=kb)


@router.callback_query(F.data == "start_add_channel")
async def start_add_channel(callback: types.CallbackQuery):
    await callback.answer()
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–æ–º–∞–Ω–¥—É /add_my_channel
    await callback.message.answer(
        "–ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –∫–∞–Ω–∞–ª –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–∞—Ä–∏—Ñ—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
        "/add_my_channel",
        parse_mode="HTML"
    )


@router.callback_query(F.data == "enter_channel")
async def enter_channel(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    prompt = fmt_card(
        "–í–≤–æ–¥ ID –∫–∞–Ω–∞–ª–∞",
        ["–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∫–∞–Ω–∞–ª–∞."]
    )
    kb = make_keyboard([("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "start")], row_width=1)
    await callback.message.edit_text(prompt, parse_mode="HTML", reply_markup=kb)
    await state.set_state(states.UserOrderState.WAITING_CHANNEL_ID)


@router.message(states.UserOrderState.WAITING_CHANNEL_ID)
async def process_channel_id(message: types.Message, state: FSMContext):
    text = message.text.strip()
    try:
        channel_id = int(text)
    except ValueError:
        return await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤–æ–π ID –∫–∞–Ω–∞–ª–∞.")
    await state.clear()
    return await show_tariffs_for_channel(message, channel_id)


async def show_tariffs_for_channel(message: types.Message, channel_id: int):
    channel = database.get_channel(channel_id)
    if not channel:
        return await message.answer("‚ùó –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π ID.", parse_mode="HTML")
    tariffs = database.list_tariffs(channel_id)
    if not tariffs:
        return await message.answer("‚ÑπÔ∏è –í —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ –Ω–µ—Ç —Ç–∞—Ä–∏—Ñ–æ–≤.", parse_mode="HTML")

    lines = [fmt_field("üíé", t["title"], f"{t['duration_days']} –¥–Ω ‚Äî {t['price']}‚ÇΩ") for t in tariffs]
    text = fmt_card(f"–¢–∞—Ä–∏—Ñ—ã –∫–∞–Ω–∞–ª–∞ ¬´{channel['title']}¬ª", lines)
    kb = make_keyboard(
        [(f"–ö—É–ø–∏—Ç—å: {t['title']}", f"buy_{channel_id}_{t['id']}") for t in tariffs],
        row_width=1
    )
    await message.answer(text, parse_mode="HTML", reply_markup=kb)


@router.callback_query(F.data.startswith("buy_"))
async def callback_buy(callback: types.CallbackQuery, state: FSMContext):
    # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data –≤–∏–¥–∞ buy_{channel_id}_{tariff_id}
    raw = callback.data.removeprefix("buy_")
    try:
        channel_str, tariff_str = raw.split("_", 1)
        channel_id = int(channel_str)
        tariff_id = int(tariff_str)
    except Exception:
        return await callback.answer("‚ùó –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)

    user_id = callback.from_user.id
    # –°–æ–∑–¥–∞—ë–º –∑–∞—è–≤–∫—É
    database.create_order(channel_id, user_id, tariff_id)
    channel = database.get_channel(channel_id)
    tariff = database.get_tariff(tariff_id)
    payment = channel.get("payment_info", "")
    lines = [
        f"–†–µ–∫–≤–∏–∑–∏—Ç—ã: <code>{channel['payment_info']}</code>",
        "",
        fmt_field("üõí", "–¢–∞—Ä–∏—Ñ", tariff['title']),
        fmt_field("‚è≥", "–°—Ä–æ–∫", f"{tariff['duration_days']} –¥–Ω"),
        fmt_field("üí∞", "–¶–µ–Ω–∞", f"{tariff['price']}‚ÇΩ"),
        "",
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã."
    ]
    text = fmt_card("–û–ø–ª–∞—Ç–∞", lines)
    kb = make_keyboard([("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "start")], row_width=1)
    await callback.message.answer(text, parse_mode="HTML", reply_markup=kb)
    await callback.answer()
    await state.set_state(states.UserOrderState.WAITING_SCREENSHOT)
    await state.update_data(channel_id=channel_id, tariff_id=tariff_id)


@router.message(states.UserOrderState.WAITING_SCREENSHOT, F.photo)
async def receive_screenshot(message: types.Message, state: FSMContext):
    data = await state.get_data()
    channel_id = data.get("channel_id")
    tariff_id = data.get("tariff_id")
    user_id = message.from_user.id
    photo_id = message.photo[-1].file_id

    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É
    database.update_order_proof(channel_id, user_id, tariff_id, proof_photo_id=photo_id)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    channel = database.get_channel(channel_id)
    tariff = database.get_tariff(tariff_id)
    owner = channel["owner_id"]
    mention = (
        f"@{message.from_user.username}" if message.from_user.username
        else f"<a href='tg://user?id={user_id}'>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a>"
    )
    lines = [
        f"–ó–∞—è–≤–∫–∞ –æ—Ç {mention} (ID: <code>{user_id}</code>)",
        fmt_field("üì¶", "–¢–∞—Ä–∏—Ñ", tariff['title']),
        fmt_field("‚è≥", "–°—Ä–æ–∫", f"{tariff['duration_days']} –¥–Ω"),
        fmt_field("üí∞", "–¶–µ–Ω–∞", f"{tariff['price']}‚ÇΩ")
    ]
    text = fmt_card("–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞", lines)
    kb = make_keyboard([
        ("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", f"approve_{channel_id}_{user_id}_{tariff_id}"),
        ("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", f"reject_{channel_id}_{user_id}_{tariff_id}"),
        ("üôä –ë–µ–∑ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è", f"reject_silent_{channel_id}_{user_id}_{tariff_id}")
    ], row_width=1)
    await message.bot.send_photo(owner, photo_id, caption=text, parse_mode="HTML", reply_markup=kb)
    await message.answer("‚úÖ –í–∞—à —á–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.")
    await state.clear()


@router.message(Command("cancel"))
async def cmd_cancel(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
