import database
import states
import time
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from utils import fmt_card, fmt_field, make_keyboard

router = Router()

# -----------------------------
# –®–∞–±–ª–æ–Ω—ã –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
# -----------------------------

BACK = ("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", None)  # callback_data –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
CANCEL = ("‚ùå –û—Ç–º–µ–Ω–∞", "cancel_admin")


# -----------------------------
# –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–∞–∑–±–æ—Ä–∞ callback_data –≤–∏–¥–∞ "<cmd>_<channel>[_<item>]"
# -----------------------------
def parse_cd(data: str, prefix: str, parts: int = 1):
    """
    –£–±–∏—Ä–∞–µ—Ç –ø—Ä–µ—Ñ–∏–∫—Å –∏ —Ä–∞–∑–±–∏–≤–∞–µ—Ç –ø–æ "_", –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —á–∞—Å—Ç–µ–π.
    """
    payload = data.removeprefix(prefix)
    items = payload.split("_", parts)
    if len(items) < parts:
        raise ValueError
    return items


# -----------------------------
# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞
# -----------------------------
@router.message(Command("add_my_channel"))
async def cmd_add_my_channel(message: types.Message, state: FSMContext):
    text = fmt_card(
        "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞",
        [
            "1Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –≤–∞—à –∫–∞–Ω–∞–ª.",
            "2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ ID –∫–∞–Ω–∞–ª–∞.",
            "3Ô∏è‚É£ –í –∫–∞–Ω–∞–ª–µ –≤—ã–∑–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /id –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID."
        ]
    )
    kb = make_keyboard([
        ("üì° –£–∫–∞–∑–∞—Ç—å –∫–∞–Ω–∞–ª", "enter_admin_channel"),
        CANCEL
    ], row_width=1)
    await state.clear()
    await message.answer(text, reply_markup=kb, parse_mode="HTML")
    await state.set_state(states.AddChannelState.WAITING_USERNAME)


@router.callback_query(F.data == "cancel_admin")
async def cancel_admin(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.delete()
    await callback.answer()


@router.callback_query(F.data == "enter_admin_channel")
async def enter_admin_channel(callback: types.CallbackQuery, state: FSMContext):
    text = fmt_card(
        "–£–∫–∞–∂–∏—Ç–µ –∫–∞–Ω–∞–ª",
        ["–û—Ç–ø—Ä–∞–≤—å—Ç–µ @username, —Å—Å—ã–ª–∫—É t.me/... –∏–ª–∏ —á–∏—Å–ª–æ–≤–æ–π ID –∫–∞–Ω–∞–ª–∞."]
    )
    kb = make_keyboard([
        ("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "add_my_channel"),
        CANCEL
    ], row_width=1)
    await callback.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
    await callback.answer()
    await state.set_state(states.AddChannelState.WAITING_USERNAME)


@router.message(states.AddChannelState.WAITING_USERNAME)
async def process_channel_username(message: types.Message, state: FSMContext):
    raw = message.text.strip()
    cleaned = raw.replace("https://t.me/", "").replace("t.me/", "")
    try:
        chat = await message.bot.get_chat(cleaned)
        me = await message.bot.me()
        member = await message.bot.get_chat_member(chat.id, me.id)
        if member.status not in ("administrator", "creator"):
            raise PermissionError
    except PermissionError:
        return await message.answer("‚ùó –ë–æ—Ç –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ.", parse_mode="HTML")
    except Exception:
        return await message.answer("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ.", parse_mode="HTML")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–æ—Å–∏–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
    await state.update_data(
        channel_id=chat.id,
        channel_title=chat.title,
        owner_id=message.from_user.id
    )
    text = fmt_card(
        "–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã",
        [f"–ö–∞–Ω–∞–ª: <b>{chat.title}</b> (ID: <code>{chat.id}</code>)",
         "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã (–Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã, QIWI –∏ —Ç.–ø.)."]
    )
    kb = make_keyboard([
        ("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "add_my_channel"),
        CANCEL
    ], row_width=1)
    await message.answer(text, reply_markup=kb, parse_mode="HTML")
    await state.set_state(states.AddChannelState.WAITING_PAYMENT_INFO)


@router.message(states.AddChannelState.WAITING_PAYMENT_INFO)
async def process_payment_info(message: types.Message, state: FSMContext):
    data = await state.get_data()
    channel_id = data["channel_id"]
    database.add_or_update_channel(
        channel_id,
        data["owner_id"],
        data["channel_title"],
        message.text.strip()
    )

    deep_link = f"https://t.me/{(await message.bot.me()).username}?start={channel_id}"
    text = fmt_card(
        "–ö–∞–Ω–∞–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω",
        [
            f"–ö–∞–Ω–∞–ª: <b>{data['channel_title']}</b> (ID: <code>{channel_id}</code>)",
            f"–†–µ–∫–≤–∏–∑–∏—Ç—ã: {message.text.strip()}",
            f"–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <code>{deep_link}</code>"
        ]
    )
    kb = make_keyboard([
        ("‚û°Ô∏è –ú–µ–Ω—é –∫–∞–Ω–∞–ª–∞", f"channel_menu_{channel_id}"),
        CANCEL
    ], row_width=1)

    await message.answer(text, reply_markup=kb, parse_mode="HTML")
    await state.clear()


# -----------------------------
# –ú–µ–Ω—é –∫–∞–Ω–∞–ª–æ–≤
# -----------------------------
@router.message(Command("my_channels"))
async def cmd_my_channels(message: types.Message):
    owner_id = message.from_user.id
    channels = database.list_channels_of_owner(owner_id)
    if not channels:
        return await message.answer("‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.", parse_mode="HTML")

    lines = [fmt_field("‚Ä¢", ch["title"], f"ID: <code>{ch['channel_id']}</code>") for ch in channels]
    text = fmt_card("–í–∞—à–∏ –∫–∞–Ω–∞–ª—ã", lines)
    kb = make_keyboard([(ch["title"], f"channel_menu_{ch['channel_id']}") for ch in channels], row_width=1)
    await message.answer(text, reply_markup=kb, parse_mode="HTML")


@router.callback_query(F.data.startswith("channel_menu_"))
async def channel_menu(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    channel_id = int(parse_cd(callback.data, "channel_menu_")[0])
    ch = database.get_channel(channel_id)
    payment = f"<code>{ch['payment_info'] or '‚Äî'}</code>"
    deep_link = f"https://t.me/{(await callback.bot.me()).username}?start={channel_id}"

    lines = [
        fmt_field("üÜî", "ID –∫–∞–Ω–∞–ª–∞", str(channel_id)),
        fmt_field("üõí", "–†–µ–∫–≤–∏–∑–∏—Ç—ã", payment),
        fmt_field("üîó", "–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", f"<code>{deep_link}</code>")
    ]
    text = fmt_card("–ú–µ–Ω—é –∫–∞–Ω–∞–ª–∞", lines)

    kb = make_keyboard([
        ("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã", f"update_payment_info_{channel_id}"),
        ("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–∞—Ä–∏—Ñ", f"add_tariff_{channel_id}"),
        ("üìÑ –°–ø–∏—Å–æ–∫ —Ç–∞—Ä–∏—Ñ–æ–≤", f"list_tariffs_{channel_id}"),
        ("üóë –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª", f"del_channel_{channel_id}"),
        ("‚ùå –ó–∞–∫—Ä—ã—Ç—å", "close_menu"),
    ], row_width=2)

    await callback.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
    await callback.answer()


# -----------------------------
# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
# -----------------------------
@router.callback_query(F.data.startswith("update_payment_info_"))
async def update_payment_info_start(callback: types.CallbackQuery, state: FSMContext):
    channel_id = int(parse_cd(callback.data, "update_payment_info_")[0])
    await state.set_state(states.UpdatePaymentState.WAITING_NEW_PAYMENT_INFO)
    await state.update_data(channel_id=channel_id)

    text = fmt_card("–û–±–Ω–æ–≤–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã", ["–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã."])
    kb = make_keyboard([
        ("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", f"channel_menu_{channel_id}"),
        CANCEL
    ], row_width=1)

    await callback.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
    await callback.answer()


@router.message(states.UpdatePaymentState.WAITING_NEW_PAYMENT_INFO, F.text)
async def process_new_payment_info(message: types.Message, state: FSMContext):
    data = await state.get_data()
    channel_id = data["channel_id"]
    new_info = message.text.strip()

    database.update_channel_payment_info(channel_id, new_info)

    text = fmt_card("–†–µ–∫–≤–∏–∑–∏—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã", [f"–ù–æ–≤—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã: {new_info}"])
    kb = make_keyboard([("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", f"channel_menu_{channel_id}")], row_width=1)

    await message.answer(text, reply_markup=kb, parse_mode="HTML")
    await state.clear()


# -----------------------------
# –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
# -----------------------------
@router.callback_query(F.data.startswith("del_channel_"))
async def del_channel(callback: types.CallbackQuery, state: FSMContext):
    channel_id = int(parse_cd(callback.data, "del_channel_")[0])
    database.delete_channel(channel_id)
    await callback.message.edit_text("‚ÑπÔ∏è –ö–∞–Ω–∞–ª —É–¥–∞–ª—ë–Ω.", parse_mode="HTML")
    await callback.answer()
    await state.clear()


# -----------------------------
# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞–º–∏
# -----------------------------
@router.callback_query(F.data.startswith("add_tariff_"))
async def add_tariff_start(callback: types.CallbackQuery, state: FSMContext):
    channel_id = int(parse_cd(callback.data, "add_tariff_")[0])
    ch = database.get_channel(channel_id)
    if not ch or ch["owner_id"] != callback.from_user.id:
        return await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)

    await state.update_data(channel_id=channel_id)
    await state.set_state(states.AddTariffState.WAITING_TITLE)

    text = fmt_card("–î–æ–±–∞–≤–∏—Ç—å —Ç–∞—Ä–∏—Ñ", ["–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:"])
    kb = make_keyboard([
        ("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", f"channel_menu_{channel_id}"),
        CANCEL
    ], row_width=1)

    await callback.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
    await callback.answer()


@router.message(states.AddTariffState.WAITING_TITLE)
async def add_tariff_title(message: types.Message, state: FSMContext):
    title = message.text.strip()
    await state.update_data(tariff_title=title)
    data = await state.get_data()

    text = fmt_card("–î–æ–±–∞–≤–∏—Ç—å —Ç–∞—Ä–∏—Ñ", ["–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–¥–Ω–∏):"])
    kb = make_keyboard([
        ("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", f"add_tariff_{data['channel_id']}"),
        CANCEL
    ], row_width=1)

    await message.answer(text, reply_markup=kb, parse_mode="HTML")
    await state.set_state(states.AddTariffState.WAITING_DURATION)


@router.message(states.AddTariffState.WAITING_DURATION)
async def add_tariff_duration(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        return await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.", parse_mode="HTML")

    await state.update_data(duration_days=int(message.text))
    data = await state.get_data()

    text = fmt_card("–î–æ–±–∞–≤–∏—Ç—å —Ç–∞—Ä–∏—Ñ", ["–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É (‚ÇΩ):"])
    kb = make_keyboard([
        ("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", f"add_tariff_{data['channel_id']}"),
        CANCEL
    ], row_width=1)

    await message.answer(text, reply_markup=kb, parse_mode="HTML")
    await state.set_state(states.AddTariffState.WAITING_PRICE)


@router.message(states.AddTariffState.WAITING_PRICE)
async def add_tariff_price(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        return await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É.", parse_mode="HTML")

    data = await state.get_data()
    database.add_tariff(
        data["channel_id"],
        data["tariff_title"],
        data["duration_days"],
        int(message.text)
    )

    text = fmt_card("–î–æ–±–∞–≤–∏—Ç—å —Ç–∞—Ä–∏—Ñ",
                    [f"¬´{data['tariff_title']}¬ª ‚Äî {data['duration_days']} –¥–Ω –∑–∞ {message.text}‚ÇΩ –¥–æ–±–∞–≤–ª–µ–Ω."])
    kb = make_keyboard([
        ("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", f"channel_menu_{data['channel_id']}"),
        CANCEL
    ], row_width=1)

    await message.answer(text, reply_markup=kb, parse_mode="HTML")
    await state.clear()


@router.callback_query(F.data.startswith("list_tariffs_"))
async def list_tariffs(callback: types.CallbackQuery):
    channel_id = int(parse_cd(callback.data, "list_tariffs_")[0])
    ch = database.get_channel(channel_id)
    if not ch or ch["owner_id"] != callback.from_user.id:
        return await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)

    tariffs = database.list_tariffs(channel_id)
    if not tariffs:
        return await callback.message.edit_text("‚ÑπÔ∏è –ù–µ—Ç —Ç–∞—Ä–∏—Ñ–æ–≤.", parse_mode="HTML")

    lines = [fmt_field("üíé", t["title"], f"{t['duration_days']} –¥–Ω ‚Äî {t['price']}‚ÇΩ") for t in tariffs]
    text = fmt_card("–°–ø–∏—Å–æ–∫ —Ç–∞—Ä–∏—Ñ–æ–≤", lines)

    kb = make_keyboard(
        [(f"‚ùå –£–¥–∞–ª–∏—Ç—å ¬´{t['title']}¬ª", f"del_tariff_{channel_id}_{t['id']}") for t in tariffs] +
        [("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", f"channel_menu_{channel_id}")],
        row_width=1
    )
    await callback.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data.startswith("del_tariff_"))
async def del_tariff(callback: types.CallbackQuery):
    parts = parse_cd(callback.data, "del_tariff_", parts=2)
    channel_id, tariff_id = map(int, parts)
    ch = database.get_channel(channel_id)
    if not ch or ch["owner_id"] != callback.from_user.id:
        return await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)

    database.remove_tariff(tariff_id)
    await callback.answer("‚úÖ –¢–∞—Ä–∏—Ñ —É–¥–∞–ª—ë–Ω", show_alert=True)
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
    await list_tariffs(callback)


# -----------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫
# -----------------------------
@router.callback_query(F.data.startswith("approve_"))
async def on_approve(callback: types.CallbackQuery):
    try:
        channel_id, user_id, tariff_id = map(int, parse_cd(callback.data, "approve_", parts=3))
    except ValueError:
        return await callback.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", show_alert=True)

    database.approve_order(channel_id, user_id, tariff_id)
    tariff = database.get_tariff(tariff_id)
    database.add_subscription(channel_id, user_id, tariff["duration_days"])

    invite = await callback.bot.create_chat_invite_link(
        chat_id=channel_id,
        expire_date=int(time.time()) + tariff["duration_days"] * 86400,
        member_limit=1
    )

    await callback.bot.send_message(
        user_id,
        fmt_card("–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞", [
            f"–¢–∞—Ä–∏—Ñ: <b>{tariff['title']}</b>",
            f"–°—Ä–æ–∫: {tariff['duration_days']} –¥–Ω",
            f"–í–∞—à–∞ —Å—Å—ã–ª–∫–∞: {invite.invite_link}"
        ]),
        parse_mode="HTML"
    )
    await callback.answer("‚úÖ –ó–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞", show_alert=True)
    await callback.message.delete()


@router.callback_query(F.data.startswith("reject_silent_"))
async def on_reject_silent(callback: types.CallbackQuery):
    try:
        channel_id, user_id, tariff_id = map(int, parse_cd(callback.data, "reject_silent_", parts=3))
    except ValueError:
        return await callback.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", show_alert=True)

    database.reject_order(channel_id, user_id, tariff_id, reason="–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –±–µ–∑ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è")
    await callback.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –±–µ–∑ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è", show_alert=True)
    await callback.message.delete()


@router.callback_query(F.data.startswith("reject_") & ~F.data.startswith("reject_silent_"))
async def on_reject(callback: types.CallbackQuery, state: FSMContext):
    try:
        channel_id, user_id, tariff_id = map(int, parse_cd(callback.data, "reject_", parts=3))
    except ValueError:
        return await callback.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", show_alert=True)

    await state.update_data(
        channel_id=channel_id,
        user_id=user_id,
        tariff_id=tariff_id,
        admin_chat_id=callback.message.chat.id,
        admin_msg_id=callback.message.message_id
    )
    text = fmt_card("–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è", ["–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–∏—á–∏–Ω—ã."])
    kb = make_keyboard([CANCEL], row_width=1)

    await callback.message.edit_caption(text, parse_mode="HTML", reply_markup=kb)
    await state.set_state(states.AdminRejectionState.WAITING_REASON)
    await callback.answer()


@router.message(states.AdminRejectionState.WAITING_REASON)
async def process_reject_reason(message: types.Message, state: FSMContext):
    data = await state.get_data()
    reason = message.text.strip()
    database.reject_order(data["channel_id"], data["user_id"], data["tariff_id"], reason=reason)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.bot.send_message(
        data["user_id"],
        fmt_card("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞", [f"–ü—Ä–∏—á–∏–Ω–∞: {reason}"]),
        parse_mode="HTML"
    )
    # –£–¥–∞–ª—è–µ–º –∞–¥–º–∏–Ω—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.bot.delete_message(data["admin_chat_id"], data["admin_msg_id"])

    await message.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª—ë–Ω", parse_mode="HTML")
    await state.clear()


# -----------------------------
# –ü–æ–ª—É—á–µ–Ω–∏–µ ID
# -----------------------------
@router.message(Command("id"))
async def cmd_id(message: types.Message):
    chat = message.chat
    if chat.type in ("channel", "supergroup"):
        await message.bot.send_message(
            message.from_user.id,
            fmt_card("ID —á–∞—Ç–∞", [f"{chat.title} ‚Äî ID: <code>{chat.id}</code>"]),
            parse_mode="HTML"
        )
        await message.delete()
    else:
        await message.answer("‚ùó –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤ –∫–∞–Ω–∞–ª–µ.", parse_mode="HTML")
