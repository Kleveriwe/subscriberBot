from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

import database
import states
import time
from utils import fmt_card, fmt_field, make_keyboard

router = Router()


# -----------------------------
# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞
# -----------------------------
@router.message(Command("add_my_channel"))
async def cmd_add_my_channel(message: types.Message, state: FSMContext):
    text = fmt_card(
        "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞",
        [
            "1Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –≤–∞—à –∫–∞–Ω–∞–ª.",
            "2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ ID –∫–∞–Ω–∞–ª–∞.",
            "3Ô∏è‚É£ –í–Ω—É—Ç—Ä–∏ –∫–∞–Ω–∞–ª–∞ –≤—ã–∑–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /id, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID –∫–∞–Ω–∞–ª–∞."
        ]
    )
    kb = make_keyboard([
        ("üì° –£–∫–∞–∑–∞—Ç—å –∫–∞–Ω–∞–ª", "enter_admin_channel"),
        ("‚ùå –û—Ç–º–µ–Ω–∞", "cancel_admin")
    ], row_width=1)
    await message.answer(text, parse_mode="HTML", reply_markup=kb)
    await state.set_state(states.AddChannelState.waiting_username)


@router.callback_query(F.data == "cancel_admin")
async def cancel_admin(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.delete()
    await callback.answer()


@router.callback_query(F.data == "enter_admin_channel")
async def enter_admin_channel(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    text = fmt_card(
        "–£–∫–∞–∂–∏—Ç–µ –∫–∞–Ω–∞–ª",
        ["–û—Ç–ø—Ä–∞–≤—å—Ç–µ @username, —Å—Å—ã–ª–∫—É –∏–ª–∏ —á–∏—Å–ª–æ–≤–æ–π ID –∫–∞–Ω–∞–ª–∞."]
    )
    kb = make_keyboard([
        ("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "add_my_channel"),
        ("‚ùå –û—Ç–º–µ–Ω–∞", "cancel_admin")
    ], row_width=1)
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=kb)
    await state.set_state(states.AddChannelState.waiting_username)


@router.message(states.AddChannelState.waiting_username)
async def process_channel_username(message: types.Message, state: FSMContext):
    raw = message.text.strip()
    cleaned = raw.replace("https://t.me/", "").replace("t.me/", "").strip()
    try:
        chat = await message.bot.get_chat(cleaned)
        bot_id = (await message.bot.me()).id
        member = await message.bot.get_chat_member(chat.id, bot_id)
        if member.status not in ("administrator", "creator"):
            return await message.answer("‚ùó –ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ.", parse_mode="HTML")
    except Exception:
        return await message.answer(
            "‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –∏ –¥–∞–Ω–Ω—ã–µ.",
            parse_mode="HTML"
        )

    await state.update_data(
        channel_id=chat.id,
        channel_title=chat.title,
        owner_id=message.from_user.id
    )
    text = fmt_card(
        "–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã",
        [
            f"–ö–∞–Ω–∞–ª: <b>{chat.title}</b> (ID: <code>{chat.id}</code>)",
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã: –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã, QIWI –∏ —Ç.–ø."
        ]
    )
    kb = make_keyboard([
        ("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "add_my_channel"),
        ("‚ùå –û—Ç–º–µ–Ω–∞", "cancel_admin")
    ], row_width=1)
    await message.answer(text, parse_mode="HTML", reply_markup=kb)
    await state.set_state(states.AddChannelState.waiting_payment_info)


@router.message(states.AddChannelState.waiting_payment_info)
async def process_payment_info(message: types.Message, state: FSMContext):
    data = await state.get_data()
    channel_id = data["channel_id"]
    owner_id = data["owner_id"]
    title = data["channel_title"]
    payment = message.text.strip()

    database.add_or_update_channel(channel_id, owner_id, title, payment)

    deep_link = f"https://t.me/{(await message.bot.me()).username}?start={channel_id}"
    text = fmt_card(
        "–ö–∞–Ω–∞–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω",
        [
            f"–ö–∞–Ω–∞–ª: <b>{title}</b> (ID: <code>{channel_id}</code>)",
            f"–†–µ–∫–≤–∏–∑–∏—Ç—ã: {payment}",
            f"–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{deep_link}</code>"
        ]
    )
    kb = make_keyboard([
        ("‚û°Ô∏è –ú–µ–Ω—é –∫–∞–Ω–∞–ª–∞", f"channel_menu_{channel_id}"),
        ("‚ùå –û—Ç–º–µ–Ω–∞", "cancel_admin")
    ], row_width=1)
    await message.answer(text, parse_mode="HTML", reply_markup=kb)
    await state.clear()


# -----------------------------
# –ú–µ–Ω—é –∫–∞–Ω–∞–ª–æ–≤
# -----------------------------
@router.message(Command("my_channels"))
async def cmd_my_channels(message: types.Message):
    owner_id = message.from_user.id
    channels = database.list_channels_of_owner(owner_id)
    if not channels:
        return await message.answer("‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.", parse_mode="HTML")

    lines = [fmt_field("‚Ä¢", ch["title"], f"ID: <code>{ch['channel_id']}</code>") for ch in channels]
    text = fmt_card("–í–∞—à–∏ –∫–∞–Ω–∞–ª—ã", lines)
    kb = make_keyboard([(ch['title'], f"channel_menu_{ch['channel_id']}") for ch in channels], row_width=1)
    await message.answer(text, parse_mode="HTML", reply_markup=kb)


@router.callback_query(F.data.startswith("channel_menu_"))
async def channel_menu(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    channel_id = int(callback.data.split("_", 2)[2])
    # –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –∫–∞–Ω–∞–ª–∞
    deep_link = f"https://t.me/{(await callback.bot.me()).username}?start={channel_id}"
    lines = [fmt_field("üÜî", "ID –∫–∞–Ω–∞–ª–∞", str(channel_id)),
             fmt_field("üîó", "–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", f"<code>{deep_link}</code>")]
    text = fmt_card("–ú–µ–Ω—é –∫–∞–Ω–∞–ª–∞", lines)
    kb = make_keyboard([
        ("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–∞—Ä–∏—Ñ", f"add_tariff_{channel_id}"),
        ("üìÑ –°–ø–∏—Å–æ–∫ —Ç–∞—Ä–∏—Ñ–æ–≤", f"list_tariffs_{channel_id}"),
        ("‚ùå –ó–∞–∫—Ä—ã—Ç—å", "close_menu")
    ], row_width=1)
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=kb)
    await callback.answer()


@router.callback_query(F.data == "close_menu")
async def close_menu(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.delete()
    await callback.answer()


# -----------------------------
# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞–º–∏
# -----------------------------
@router.callback_query(F.data.startswith("add_tariff_"))
async def add_tariff_start(callback: types.CallbackQuery, state: FSMContext):
    raw = callback.data.removeprefix("add_tariff_")
    try:
        channel_id = int(raw)
    except ValueError:
        return await callback.answer("üö´ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞", show_alert=True)
    ch = database.get_channel(channel_id)
    if not ch or ch["owner_id"] != callback.from_user.id:
        return await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
    await state.update_data(channel_id=channel_id)
    text = fmt_card("–î–æ–±–∞–≤–∏—Ç—å —Ç–∞—Ä–∏—Ñ", ["–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞:"])
    kb = make_keyboard([("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", f"channel_menu_{channel_id}"), ("‚ùå –û—Ç–º–µ–Ω–∞", "close_menu")], row_width=1)
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=kb)
    await state.set_state(states.AddTariffState.WAITING_TITLE)
    await callback.answer()


@router.message(states.AddTariffState.WAITING_TITLE)
async def add_tariff_title(message: types.Message, state: FSMContext):
    title = message.text.strip()
    data = await state.get_data()
    channel_id = data["channel_id"]
    await state.update_data(tariff_title=title)
    text = fmt_card("–î–æ–±–∞–≤–∏—Ç—å —Ç–∞—Ä–∏—Ñ", ["–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π:"])
    kb = make_keyboard([("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", f"add_tariff_{channel_id}"), ("‚ùå –û—Ç–º–µ–Ω–∞", "close_menu")], row_width=1)
    await message.answer(text, parse_mode="HTML", reply_markup=kb)
    await state.set_state(states.AddTariffState.WAITING_DURATION)


@router.message(states.AddTariffState.WAITING_DURATION)
async def add_tariff_duration(message: types.Message, state: FSMContext):
    if not message.text.strip().isdigit():
        return await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π.")
    duration = int(message.text.strip())
    data = await state.get_data()
    channel_id = data["channel_id"]
    await state.update_data(duration_days=duration)
    text = fmt_card("–î–æ–±–∞–≤–∏—Ç—å —Ç–∞—Ä–∏—Ñ", ["–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É (–≤ —Ä—É–±–ª—è—Ö):"])
    kb = make_keyboard([("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", f"add_tariff_{channel_id}"), ("‚ùå –û—Ç–º–µ–Ω–∞", "close_menu")], row_width=1)
    await message.answer(text, parse_mode="HTML", reply_markup=kb)
    await state.set_state(states.AddTariffState.WAITING_PRICE)


@router.message(states.AddTariffState.WAITING_PRICE)
async def add_tariff_price(message: types.Message, state: FSMContext):
    if not message.text.strip().isdigit():
        return await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É.")
    price = int(message.text.strip())
    data = await state.get_data()
    channel_id = data["channel_id"]
    title = data["tariff_title"]
    duration = data["duration_days"]

    database.add_tariff(channel_id, title, duration, price)
    text = fmt_card("–î–æ–±–∞–≤–∏—Ç—å —Ç–∞—Ä–∏—Ñ", [f"–¢–∞—Ä–∏—Ñ –¥–æ–±–∞–≤–ª–µ–Ω: {title} ‚Äî {duration} –¥–Ω –∑–∞ {price}‚ÇΩ"])
    kb = make_keyboard([("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", f"channel_menu_{channel_id}"), ("‚ùå –û—Ç–º–µ–Ω–∞", "close_menu")], row_width=1)
    await message.answer(text, parse_mode="HTML", reply_markup=kb)
    await state.clear()


@router.callback_query(F.data.startswith("list_tariffs_"))
async def list_tariffs(callback: types.CallbackQuery):
    channel_id = int(callback.data.split("_", 2)[2])
    ch = database.get_channel(channel_id)
    if not ch or ch["owner_id"] != callback.from_user.id:
        return await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
    tariffs = database.list_tariffs(channel_id)
    if not tariffs:
        return await callback.message.edit_text("‚ÑπÔ∏è –ù–µ—Ç —Ç–∞—Ä–∏—Ñ–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞.")
    lines = [fmt_field("üíé", t["title"], f"{t['duration_days']} –¥–Ω ‚Äî {t['price']}‚ÇΩ") for t in tariffs]
    text = fmt_card("–°–ø–∏—Å–æ–∫ —Ç–∞—Ä–∏—Ñ–æ–≤", lines)
    kb = make_keyboard(
        [(f"‚ùå –£–¥–∞–ª–∏—Ç—å {t['title']}", f"del_tariff_{channel_id}_{t['id']}") for t in tariffs] +
        [("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", f"channel_menu_{channel_id}")],
        row_width=1
    )
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=kb)
    await callback.answer()


@router.callback_query(F.data.startswith("del_tariff_"))
async def del_tariff(callback: types.CallbackQuery):
    parts = callback.data.split("_")
    channel_id, tariff_id = int(parts[2]), int(parts[3])
    ch = database.get_channel(channel_id)
    if not ch or ch["owner_id"] != callback.from_user.id:
        return await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
    database.remove_tariff(tariff_id)
    await callback.answer("‚úÖ –¢–∞—Ä–∏—Ñ —É–¥–∞–ª—ë–Ω")
    # –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫
    return await list_tariffs(callback)


# -----------------------------
# –ú–æ–¥–µ—Ä–∞—Ü–∏—è –∑–∞—è–≤–æ–∫
# -----------------------------
@router.callback_query(F.data.startswith("approve_"))
async def on_approve(callback: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏"""
    raw = callback.data.removeprefix("approve_")
    try:
        channel_str, user_str, tariff_str = raw.split("_", 2)
        channel_id = int(channel_str)
        user_id = int(user_str)
        tariff_id = int(tariff_str)
    except Exception:
        return await callback.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", show_alert=True)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    database.approve_order(channel_id, user_id, tariff_id)
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    tariff = database.get_tariff(tariff_id)
    database.add_subscription(channel_id, user_id, tariff["duration_days"])
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
    expire = int(time.time()) + tariff["duration_days"] * 86400
    invite = await callback.bot.create_chat_invite_link(
        chat_id=channel_id,
        expire_date=expire,
        member_limit=1
    )
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await callback.bot.send_message(
        user_id,
        fmt_card("–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞", [
            f"–¢–∞—Ä–∏—Ñ: <b>{tariff['title']}</b>",
            f"–°—Ä–æ–∫: {tariff['duration_days']} –¥–Ω",
            f"–í–∞—à–∞ —Å—Å—ã–ª–∫–∞: {invite.invite_link}"
        ]),
        parse_mode="HTML"
    )
    await callback.answer("‚úÖ –ó–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞", show_alert=True)
    await callback.message.delete()


@router.callback_query(F.data.startswith("reject_silent_"))
async def on_reject_silent(callback: types.CallbackQuery):
    """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –±–µ–∑ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è"""
    raw = callback.data.removeprefix("reject_silent_")
    try:
        channel_str, user_str, tariff_str = raw.split("_", 2)
        channel_id = int(channel_str)
        user_id = int(user_str)
        tariff_id = int(tariff_str)
    except Exception:
        return await callback.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", show_alert=True)

    database.reject_order(channel_id, user_id, tariff_id, reason="–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –±–µ–∑ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è")
    await callback.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –±–µ–∑ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è", show_alert=True)
    await callback.message.delete()


@router.callback_query(F.data.startswith("reject_") & ~F.data.startswith("reject_silent_"))
async def on_reject(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø—Ä–∏—á–∏–Ω—ã"""
    raw = callback.data.removeprefix("reject_")
    try:
        channel_str, user_str, tariff_str = raw.split("_", 2)
        channel_id = int(channel_str)
        user_id = int(user_str)
        tariff_id = int(tariff_str)
    except Exception:
        return await callback.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", show_alert=True)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–≤–æ–¥–∞ –ø—Ä–∏—á–∏–Ω—ã
    await state.update_data(
        channel_id=channel_id,
        user_id=user_id,
        tariff_id=tariff_id,
        admin_msg_id=callback.message.message_id,
        admin_chat_id=callback.message.chat.id
    )
    # –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –ø—Ä–∏—á–∏–Ω—É
    await callback.message.edit_caption(
        caption=fmt_card("–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è", ["–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–∏—á–∏–Ω—ã."]),
        parse_mode="HTML",
        reply_markup=make_keyboard([("‚ùå –û—Ç–º–µ–Ω–∞", "close_menu")], row_width=1)
    )
    await state.set_state(states.AdminRejectionState.WAITING_REASON)
    await callback.answer()


@router.message(states.AdminRejectionState.WAITING_REASON)
async def process_reject_reason(message: types.Message, state: FSMContext):
    data = await state.get_data()
    reason = message.text.strip()
    channel_id = data["channel_id"]
    user_id = data["user_id"]
    tariff_id = data["tariff_id"]

    database.reject_order(channel_id, user_id, tariff_id, reason=reason)
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.bot.send_message(
        user_id,
        fmt_card("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞", [f"–ü—Ä–∏—á–∏–Ω–∞: {reason}"]),
        parse_mode="HTML"
    )
    # –£–¥–∞–ª—è–µ–º –∞–¥–º–∏–Ω—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await message.bot.delete_message(data["admin_chat_id"], data["admin_msg_id"])
    await message.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª—ë–Ω –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏.")
    await state.clear()


@router.message(Command("id"))
async def cmd_id(message: Message):
    chat = message.chat
    bot = message.bot
    if chat.type in ("channel", "supergroup"):
        channel_id = chat.id
        await bot.send_message(
            chat_id=message.from_user.id,
            text=f"‚úÖ ID –∫–∞–Ω–∞–ª–∞ <b>{chat.title}</b> (ID: <code>{channel_id}</code>)",
            parse_mode="HTML"
        )
    else:
        await bot.send_message(
            chat_id=message.from_user.id,
            text="‚ùó –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –∫–∞–Ω–∞–ª–∞—Ö –∏ –≥—Ä—É–ø–ø–∞—Ö."
        )

    await message.delete()
