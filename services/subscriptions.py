import asyncio
import database
import logging
import time
from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from typing import Tuple, List


async def check_subscriptions(bot: Bot, interval: int = 60) -> None:
    """
    –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞, –∫–æ—Ç–æ—Ä–∞—è –∫–∞–∂–¥—ã–µ `interval` —Å–µ–∫—É–Ω–¥:
      1) –£–¥–∞–ª—è–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å—Ç—ë–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ (–±–∞–Ω + —Ä–∞–∑–±–∞–Ω).
      2) –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 1 —á–∞—Å –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏.
    """
    while True:
        now = int(time.time())

        # 1) –£–¥–∞–ª—è–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å—Ç—ë–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
        expired: List[Tuple[int, int]] = database.get_expired_subscriptions()
        for channel_id, user_id in expired:
            try:
                await bot.ban_chat_member(chat_id=channel_id, user_id=user_id, revoke_messages=False)
                await bot.unban_chat_member(chat_id=channel_id, user_id=user_id)
                logging.info(f"[Expired] Removed user {user_id} from channel {channel_id}")
            except Exception as e:
                logging.error(f"Failed to remove user {user_id} from channel {channel_id}: {e}")
            finally:
                database.remove_subscription(channel_id, user_id)

        # 2) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 1 —á–∞—Å –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è (–µ—Å–ª–∏ –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏)
        soon: List[Tuple[int, int, int]] = database.get_expiring_subscriptions_1h()
        for channel_id, user_id, expire_at in soon:
            await send_1h_notice(bot, channel_id, user_id, expire_at)
            database.mark_subscription_reminded(channel_id, user_id)

        await asyncio.sleep(interval)


async def send_1h_notice(bot: Bot, channel_id: int, user_id: int, expire_at: int) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º,
    —á—Ç–æ –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –¥–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –æ—Å—Ç–∞–ª–æ—Å—å ‚â§1 —á–∞—Å,
    –≤–º–µ—Å—Ç–µ —Å –∫–Ω–æ–ø–∫–æ–π ¬´–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª.
    """
    # –£–∑–Ω–∞—ë–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
    ch = database.get_channel(channel_id)
    title = ch["title"] if ch else f"ID {channel_id}"

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
    dt_str = time.strftime("%d.%m.%Y %H:%M", time.localtime(expire_at))

    text = (
        f"‚è∞ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª ¬´{title}¬ª –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 1 —á–∞—Å.\n"
        f"üìÖ <b>–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:</b> {dt_str}\n\n"
        "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–ª–∏—Ç—å ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
    )

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º deep-link –Ω–∞ /start=<channel_id>
    bot_username = (await bot.me()).username
    deep_link = f"https://t.me/{bot_username}?start={channel_id}"

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", url=deep_link)]
    ])

    try:
        await bot.send_message(chat_id=user_id, text=text, parse_mode="HTML", reply_markup=kb)
        logging.info(f"[Reminder 1h] Sent reminder to user {user_id} for channel {channel_id}")
    except Exception as e:
        logging.error(f"Failed to send 1h reminder to {user_id} for channel {channel_id}: {e}")
